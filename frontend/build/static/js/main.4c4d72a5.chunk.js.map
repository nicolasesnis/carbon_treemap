{"version":3,"sources":["pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","treeData","setTreeData","treeLayout","setTreeLayout","loading","setLoading","useEffect","fetch","process","then","response","json","resData","console","log","avg_carbon_per_capi","type","labels","label","parents","parent","values","value","branchvalues","marker","colors","color","colorscale","cmid","hovertemplate","margin","t","l","r","b","title","autosize","font","size","plot_bgcolor","Plotly","react","Grid","container","item","xs","style","backgroundColor","id","height","App","getMessage","setGetMessage","axios","get","catch","error","className","rel","href","status","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQA6EeA,MArEf,WACI,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KA4CA,OA1CAC,qBAAU,WACND,GAAW,GACXJ,GAAY,GACZM,MAAMC,iDACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,EAAQG,qBACpBd,EACI,CACIe,KAAM,UACNC,OAAQL,EAAQM,MAChBC,QAAQP,EAAQQ,OAChBC,OAAQT,EAAQU,MAChBC,aAAa,QACbC,OAAO,CACHC,OAAOb,EAAQc,MAEfC,WAAW,SACXC,KAAKhB,EAAQG,qBAEjBc,cAAc,6FAGtB1B,EACI,CAAC2B,OAAQ,CAACC,EAAE,GAAIC,EAAE,GAAIC,EAAE,GAAIC,EAAE,IAC9BC,MAAO,iBACPC,UAAU,EACVC,KAAM,CACFC,KAAM,GACNC,aAAc,WAGtBlC,GAAW,QAEpB,IAEHC,qBAAU,WACDF,GACDoC,IAAOC,MAAM,UAAW,CAACzC,GAAWE,KAEzC,CAACF,EAAUE,EAAYE,IAGtB,8BACI,eAACsC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACA,eAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,MAAO,CAACC,gBAAiB,YAA3C,oBACA,uBAAK,uBADL,yBAGA,uBAAK,uBAHL,oLAUI,cAACL,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,UACkB,IAAZzC,GAAqBJ,EAAyC,qBAAKgD,GAAG,UAAUF,MAAO,CAAEG,OAAQ,WAA9D,uDCrC1CC,MAzBf,WAEE,MAAoCnD,mBAAS,IAA7C,mBAAOoD,EAAP,KAAmBC,EAAnB,KAWA,OATA9C,qBAAU,WACR+C,IAAMC,IAAI9C,4CAAuCC,MAAK,SAAAC,GACpD0C,EAAc1C,MACb6C,OAAM,SAAAC,GACP3C,QAAQC,IAAI0C,QAGb,IAGD,sBAAKC,UAAU,MAAf,UACE,sBAAMC,IAAI,aAAaC,KAAK,gFACL,MAAtBR,EAAWS,OACV,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjE,MAGnC,6CChBOkE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.4c4d72a5.chunk.js","sourcesContent":["// import { Row, Col, Container, Card, CardGroup, Breadcrumb, CardColumns } from 'react-bootstrap';\nimport Plotly from 'plotly.js';\nimport React, { useEffect, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nfunction Home() {\n    const [treeData, setTreeData] = useState(false);\n    const [treeLayout, setTreeLayout] = useState({});\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        setLoading(true)\n        setTreeData(false)\n        fetch(process.env.REACT_APP_DOMAIN + '/get-data')\n            .then(response => response.json())\n            .then(resData => {\n                console.log(resData.avg_carbon_per_capi)\n                setTreeData(\n                    {\n                        type: \"treemap\",\n                        labels: resData.label,\n                        parents:resData.parent,\n                        values: resData.value,\n                        branchvalues:'total',\n                        marker:{\n                            colors:resData.color,\n                            // colorscale:'RdBu',\n                            colorscale:'RdYlBu',\n                            cmid:resData.avg_carbon_per_capi\n                        },\n                        hovertemplate:'<b>%{label} </b> <br> Capitalization: %{value}<br> Carbon / Capitalization: %{color:.2f}'\n                    }\n                )\n                setTreeLayout(\n                    {margin: {t:50, l:25, r:25, b:25},\n                    title: 'carbon treemap',\n                    autosize: true,\n                    font: {\n                        size: 14,\n                        plot_bgcolor: 'black'\n                    }}\n                )\n                setLoading(false)\n            })\n    }, [])\n\n    useEffect(() => {\n        if (!loading){ \n            Plotly.react('treemap', [treeData], treeLayout) \n        }\n    }, [treeData, treeLayout, loading])\n\n    return (\n        <div >\n            <Grid container >\n            <Grid item xs={2} style={{backgroundColor: 'darkGrey'}}>Sidebar\n            <br/><br/>\n            Project by Hiro & Nico\n            <br/><br/>\n            The example below visualizes a breakdown of capitalization (corresponding to sector width) and carbon emissions (corresponding to sector color) by industry and company level. \n            {/* For example, when exploring the data you can see that although the East region is behaving poorly, the Tyler county is still above average -- however, its performance is reduced by the poor success rate of salesperson GT. */}\n\n\n            \n            </Grid>\n                <Grid item xs={10}>\n                    {(loading === true && !treeData)  ?  <div>Loading data</div>  : <div id='treemap' style={{ height: '100vh' }}/>}\n                    \n                </Grid>\n            </Grid >\n        </div >\n    )\n}\n\nexport default Home;\n","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './pages/Home';\n\n\nfunction App() {\n\n  const [getMessage, setGetMessage] = useState({})\n\n  useEffect(() => {\n    axios.get(process.env.REACT_APP_DOMAIN + '/api').then(response => {\n      setGetMessage(response)\n    }).catch(error => {\n      console.log(error)\n    })\n\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n      {getMessage.status === 200 ?\n        <Router>\n          <Route exact path='/' component={Home} ></Route>\n        </Router >\n        :\n        <h3>LOADING</h3>}</div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}