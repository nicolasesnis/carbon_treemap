{"ast":null,"code":"\"use strict\";\n\nvar pool = require(\"typedarray-pool\");\n\nmodule.exports = createSurfaceExtractor;\nvar allFns = {\n  \"false,0,1\": function surfaceProcedure(vertex, face, phase, mallocUint32, freeUint32) {\n    return function extractContour0_1(a0, x0, x1, x2) {\n      var s0 = a0.shape[0] | 0,\n          s1 = a0.shape[1] | 0,\n          d0 = a0.data,\n          o0 = a0.offset | 0,\n          t0_0 = a0.stride[0] | 0,\n          t0_1 = a0.stride[1] | 0,\n          p0 = o0,\n          c0_0,\n          d0_1 = -t0_0 | 0,\n          c0_1 = 0,\n          d0_2 = -t0_1 | 0,\n          c0_2 = 0,\n          d0_3 = -t0_0 - t0_1 | 0,\n          c0_3 = 0,\n          u0_0 = t0_0 | 0,\n          u0_1 = t0_1 - t0_0 * s0 | 0,\n          i0 = 0,\n          i1 = 0,\n          N = 0,\n          Q = 2 * s0 | 0,\n          P = mallocUint32(Q),\n          V = mallocUint32(Q),\n          X = 0,\n          b0 = 0,\n          e1 = -1 | 0,\n          y1 = -1 | 0,\n          b1 = 0,\n          e2 = -s0 | 0,\n          y2 = s0 | 0,\n          b2 = 0,\n          e3 = -s0 - 1 | 0,\n          y3 = s0 - 1 | 0,\n          b3 = 0,\n          v0 = 0,\n          T = 0;\n\n      for (i0 = 0; i0 < s0; ++i0) {\n        P[X++] = phase(d0[p0], x0, x1, x2);\n        p0 += u0_0;\n      }\n\n      p0 += u0_1;\n\n      if (s1 > 0) {\n        i1 = 1;\n        P[X++] = phase(d0[p0], x0, x1, x2);\n        p0 += u0_0;\n\n        if (s0 > 0) {\n          i0 = 1;\n          c0_0 = d0[p0];\n          b0 = P[X] = phase(c0_0, x0, x1, x2);\n          b1 = P[X + e1];\n          b2 = P[X + e2];\n          b3 = P[X + e3];\n\n          if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n            c0_1 = d0[p0 + d0_1];\n            c0_2 = d0[p0 + d0_2];\n            c0_3 = d0[p0 + d0_3];\n            vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2);\n            v0 = V[X] = N++;\n          }\n\n          X += 1;\n          p0 += u0_0;\n\n          for (i0 = 2; i0 < s0; ++i0) {\n            c0_0 = d0[p0];\n            b0 = P[X] = phase(c0_0, x0, x1, x2);\n            b1 = P[X + e1];\n            b2 = P[X + e2];\n            b3 = P[X + e3];\n\n            if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n              c0_1 = d0[p0 + d0_1];\n              c0_2 = d0[p0 + d0_2];\n              c0_3 = d0[p0 + d0_3];\n              vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2);\n              v0 = V[X] = N++;\n\n              if (b3 !== b1) {\n                face(V[X + e1], v0, c0_3, c0_1, b3, b1, x0, x1, x2);\n              }\n            }\n\n            X += 1;\n            p0 += u0_0;\n          }\n        }\n\n        p0 += u0_1;\n        X = 0;\n        T = e1;\n        e1 = y1;\n        y1 = T;\n        T = e2;\n        e2 = y2;\n        y2 = T;\n        T = e3;\n        e3 = y3;\n        y3 = T;\n\n        for (i1 = 2; i1 < s1; ++i1) {\n          P[X++] = phase(d0[p0], x0, x1, x2);\n          p0 += u0_0;\n\n          if (s0 > 0) {\n            i0 = 1;\n            c0_0 = d0[p0];\n            b0 = P[X] = phase(c0_0, x0, x1, x2);\n            b1 = P[X + e1];\n            b2 = P[X + e2];\n            b3 = P[X + e3];\n\n            if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n              c0_1 = d0[p0 + d0_1];\n              c0_2 = d0[p0 + d0_2];\n              c0_3 = d0[p0 + d0_3];\n              vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2);\n              v0 = V[X] = N++;\n\n              if (b3 !== b2) {\n                face(V[X + e2], v0, c0_2, c0_3, b2, b3, x0, x1, x2);\n              }\n            }\n\n            X += 1;\n            p0 += u0_0;\n\n            for (i0 = 2; i0 < s0; ++i0) {\n              c0_0 = d0[p0];\n              b0 = P[X] = phase(c0_0, x0, x1, x2);\n              b1 = P[X + e1];\n              b2 = P[X + e2];\n              b3 = P[X + e3];\n\n              if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n                c0_1 = d0[p0 + d0_1];\n                c0_2 = d0[p0 + d0_2];\n                c0_3 = d0[p0 + d0_3];\n                vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2);\n                v0 = V[X] = N++;\n\n                if (b3 !== b2) {\n                  face(V[X + e2], v0, c0_2, c0_3, b2, b3, x0, x1, x2);\n                }\n\n                if (b3 !== b1) {\n                  face(V[X + e1], v0, c0_3, c0_1, b3, b1, x0, x1, x2);\n                }\n              }\n\n              X += 1;\n              p0 += u0_0;\n            }\n          }\n\n          if (i1 & 1) {\n            X = 0;\n          }\n\n          T = e1;\n          e1 = y1;\n          y1 = T;\n          T = e2;\n          e2 = y2;\n          y2 = T;\n          T = e3;\n          e3 = y3;\n          y3 = T;\n          p0 += u0_1;\n        }\n      }\n\n      freeUint32(V);\n      freeUint32(P);\n    };\n  },\n  \"false,1,0\": function anonymous(vertex, face, phase, mallocUint32, freeUint32) {\n    return function extractContour1_0(a0, x0, x1, x2) {\n      var s0 = a0.shape[0] | 0,\n          s1 = a0.shape[1] | 0,\n          d0 = a0.data,\n          o0 = a0.offset | 0,\n          t0_0 = a0.stride[0] | 0,\n          t0_1 = a0.stride[1] | 0,\n          p0 = o0,\n          c0_0,\n          d0_1 = -t0_0 | 0,\n          c0_1 = 0,\n          d0_2 = -t0_1 | 0,\n          c0_2 = 0,\n          d0_3 = -t0_0 - t0_1 | 0,\n          c0_3 = 0,\n          u0_1 = t0_1 | 0,\n          u0_0 = t0_0 - t0_1 * s1 | 0,\n          i0 = 0,\n          i1 = 0,\n          N = 0,\n          Q = 2 * s1 | 0,\n          P = mallocUint32(Q),\n          V = mallocUint32(Q),\n          X = 0,\n          b0 = 0,\n          e2 = -1 | 0,\n          y2 = -1 | 0,\n          b2 = 0,\n          e1 = -s1 | 0,\n          y1 = s1 | 0,\n          b1 = 0,\n          e3 = -s1 - 1 | 0,\n          y3 = s1 - 1 | 0,\n          b3 = 0,\n          v0 = 0,\n          T = 0;\n\n      for (i1 = 0; i1 < s1; ++i1) {\n        P[X++] = phase(d0[p0], x0, x1, x2);\n        p0 += u0_1;\n      }\n\n      p0 += u0_0;\n\n      if (s0 > 0) {\n        i0 = 1;\n        P[X++] = phase(d0[p0], x0, x1, x2);\n        p0 += u0_1;\n\n        if (s1 > 0) {\n          i1 = 1;\n          c0_0 = d0[p0];\n          b0 = P[X] = phase(c0_0, x0, x1, x2);\n          b1 = P[X + e1];\n          b2 = P[X + e2];\n          b3 = P[X + e3];\n\n          if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n            c0_1 = d0[p0 + d0_1];\n            c0_2 = d0[p0 + d0_2];\n            c0_3 = d0[p0 + d0_3];\n            vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2);\n            v0 = V[X] = N++;\n          }\n\n          X += 1;\n          p0 += u0_1;\n\n          for (i1 = 2; i1 < s1; ++i1) {\n            c0_0 = d0[p0];\n            b0 = P[X] = phase(c0_0, x0, x1, x2);\n            b1 = P[X + e1];\n            b2 = P[X + e2];\n            b3 = P[X + e3];\n\n            if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n              c0_1 = d0[p0 + d0_1];\n              c0_2 = d0[p0 + d0_2];\n              c0_3 = d0[p0 + d0_3];\n              vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2);\n              v0 = V[X] = N++;\n\n              if (b3 !== b2) {\n                face(V[X + e2], v0, c0_2, c0_3, b2, b3, x0, x1, x2);\n              }\n            }\n\n            X += 1;\n            p0 += u0_1;\n          }\n        }\n\n        p0 += u0_0;\n        X = 0;\n        T = e1;\n        e1 = y1;\n        y1 = T;\n        T = e2;\n        e2 = y2;\n        y2 = T;\n        T = e3;\n        e3 = y3;\n        y3 = T;\n\n        for (i0 = 2; i0 < s0; ++i0) {\n          P[X++] = phase(d0[p0], x0, x1, x2);\n          p0 += u0_1;\n\n          if (s1 > 0) {\n            i1 = 1;\n            c0_0 = d0[p0];\n            b0 = P[X] = phase(c0_0, x0, x1, x2);\n            b1 = P[X + e1];\n            b2 = P[X + e2];\n            b3 = P[X + e3];\n\n            if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n              c0_1 = d0[p0 + d0_1];\n              c0_2 = d0[p0 + d0_2];\n              c0_3 = d0[p0 + d0_3];\n              vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2);\n              v0 = V[X] = N++;\n\n              if (b3 !== b1) {\n                face(V[X + e1], v0, c0_3, c0_1, b3, b1, x0, x1, x2);\n              }\n            }\n\n            X += 1;\n            p0 += u0_1;\n\n            for (i1 = 2; i1 < s1; ++i1) {\n              c0_0 = d0[p0];\n              b0 = P[X] = phase(c0_0, x0, x1, x2);\n              b1 = P[X + e1];\n              b2 = P[X + e2];\n              b3 = P[X + e3];\n\n              if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n                c0_1 = d0[p0 + d0_1];\n                c0_2 = d0[p0 + d0_2];\n                c0_3 = d0[p0 + d0_3];\n                vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2);\n                v0 = V[X] = N++;\n\n                if (b3 !== b2) {\n                  face(V[X + e2], v0, c0_2, c0_3, b2, b3, x0, x1, x2);\n                }\n\n                if (b3 !== b1) {\n                  face(V[X + e1], v0, c0_3, c0_1, b3, b1, x0, x1, x2);\n                }\n              }\n\n              X += 1;\n              p0 += u0_1;\n            }\n          }\n\n          if (i0 & 1) {\n            X = 0;\n          }\n\n          T = e1;\n          e1 = y1;\n          y1 = T;\n          T = e2;\n          e2 = y2;\n          y2 = T;\n          T = e3;\n          e3 = y3;\n          y3 = T;\n          p0 += u0_0;\n        }\n      }\n\n      freeUint32(V);\n      freeUint32(P);\n    };\n  }\n}; //Generates the surface procedure\n\nfunction compileSurfaceProcedure(vertexFunc, faceFunc, phaseFunc, scalarArgs, order, typesig) {\n  var key = [typesig, order].join(',');\n  var proc = allFns[key];\n  return proc(vertexFunc, faceFunc, phaseFunc, pool.mallocUint32, pool.freeUint32);\n}\n\nfunction createSurfaceExtractor(args) {\n  function error(msg) {\n    throw new Error(\"ndarray-extract-contour: \" + msg);\n  }\n\n  if (typeof args !== \"object\") {\n    error(\"Must specify arguments\");\n  }\n\n  var order = args.order;\n\n  if (!Array.isArray(order)) {\n    error(\"Must specify order\");\n  }\n\n  var arrays = args.arrayArguments || 1;\n\n  if (arrays < 1) {\n    error(\"Must have at least one array argument\");\n  }\n\n  var scalars = args.scalarArguments || 0;\n\n  if (scalars < 0) {\n    error(\"Scalar arg count must be > 0\");\n  }\n\n  if (typeof args.vertex !== \"function\") {\n    error(\"Must specify vertex creation function\");\n  }\n\n  if (typeof args.cell !== \"function\") {\n    error(\"Must specify cell creation function\");\n  }\n\n  if (typeof args.phase !== \"function\") {\n    error(\"Must specify phase function\");\n  }\n\n  var getters = args.getters || [];\n  var typesig = new Array(arrays);\n\n  for (var i = 0; i < arrays; ++i) {\n    if (getters.indexOf(i) >= 0) {\n      typesig[i] = true;\n    } else {\n      typesig[i] = false;\n    }\n  }\n\n  return compileSurfaceProcedure(args.vertex, args.cell, args.phase, scalars, order, typesig);\n}","map":{"version":3,"sources":["/Users/nicolasesnis/code/carbon_treemap/client/node_modules/ndarray-extract-contour/contour.js"],"names":["pool","require","module","exports","createSurfaceExtractor","allFns","surfaceProcedure","vertex","face","phase","mallocUint32","freeUint32","extractContour0_1","a0","x0","x1","x2","s0","shape","s1","d0","data","o0","offset","t0_0","stride","t0_1","p0","c0_0","d0_1","c0_1","d0_2","c0_2","d0_3","c0_3","u0_0","u0_1","i0","i1","N","Q","P","V","X","b0","e1","y1","b1","e2","y2","b2","e3","y3","b3","v0","T","anonymous","extractContour1_0","compileSurfaceProcedure","vertexFunc","faceFunc","phaseFunc","scalarArgs","order","typesig","key","join","proc","args","error","msg","Error","Array","isArray","arrays","arrayArguments","scalars","scalarArguments","cell","getters","i","indexOf"],"mappings":"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","sourcesContent":["\"use strict\"\n\nvar pool = require(\"typedarray-pool\")\n\nmodule.exports = createSurfaceExtractor\n\nvar allFns = {\n  \"false,0,1\": function surfaceProcedure(vertex, face, phase, mallocUint32, freeUint32) {\n    return function extractContour0_1(a0, x0, x1, x2) {\n      var s0 = a0.shape[0] | 0,\n        s1 = a0.shape[1] | 0,\n        d0 = a0.data,\n        o0 = a0.offset | 0,\n        t0_0 = a0.stride[0] | 0,\n        t0_1 = a0.stride[1] | 0,\n        p0 = o0,\n        c0_0,\n        d0_1 = -t0_0 | 0,\n        c0_1 = 0,\n        d0_2 = -t0_1 | 0,\n        c0_2 = 0,\n        d0_3 = (-t0_0 - t0_1) | 0,\n        c0_3 = 0,\n        u0_0 = t0_0 | 0,\n        u0_1 = (t0_1 - t0_0 * s0) | 0,\n        i0 = 0,\n        i1 = 0,\n        N = 0,\n        Q = (2 * s0) | 0,\n        P = mallocUint32(Q),\n        V = mallocUint32(Q),\n        X = 0,\n        b0 = 0,\n        e1 = -1 | 0,\n        y1 = -1 | 0,\n        b1 = 0,\n        e2 = -s0 | 0,\n        y2 = s0 | 0,\n        b2 = 0,\n        e3 = (-s0 - 1) | 0,\n        y3 = (s0 - 1) | 0,\n        b3 = 0,\n        v0 = 0,\n        T = 0\n      for (i0 = 0; i0 < s0; ++i0) {\n        P[X++] = phase(d0[p0], x0, x1, x2)\n        p0 += u0_0\n      }\n      p0 += u0_1\n      if (s1 > 0) {\n        i1 = 1\n        P[X++] = phase(d0[p0], x0, x1, x2)\n        p0 += u0_0\n        if (s0 > 0) {\n          i0 = 1\n          c0_0 = d0[p0]\n          b0 = P[X] = phase(c0_0, x0, x1, x2)\n          b1 = P[X + e1]\n          b2 = P[X + e2]\n          b3 = P[X + e3]\n          if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n            c0_1 = d0[p0 + d0_1]\n            c0_2 = d0[p0 + d0_2]\n            c0_3 = d0[p0 + d0_3]\n            vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2)\n            v0 = V[X] = N++\n          }\n          X += 1\n          p0 += u0_0\n          for (i0 = 2; i0 < s0; ++i0) {\n            c0_0 = d0[p0]\n            b0 = P[X] = phase(c0_0, x0, x1, x2)\n            b1 = P[X + e1]\n            b2 = P[X + e2]\n            b3 = P[X + e3]\n            if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n              c0_1 = d0[p0 + d0_1]\n              c0_2 = d0[p0 + d0_2]\n              c0_3 = d0[p0 + d0_3]\n              vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2)\n              v0 = V[X] = N++\n              if (b3 !== b1) {\n                face(V[X + e1], v0, c0_3, c0_1, b3, b1, x0, x1, x2)\n              }\n            }\n            X += 1\n            p0 += u0_0\n          }\n        }\n        p0 += u0_1\n        X = 0\n        T = e1\n        e1 = y1\n        y1 = T\n        T = e2\n        e2 = y2\n        y2 = T\n        T = e3\n        e3 = y3\n        y3 = T\n        for (i1 = 2; i1 < s1; ++i1) {\n          P[X++] = phase(d0[p0], x0, x1, x2)\n          p0 += u0_0\n          if (s0 > 0) {\n            i0 = 1\n            c0_0 = d0[p0]\n            b0 = P[X] = phase(c0_0, x0, x1, x2)\n            b1 = P[X + e1]\n            b2 = P[X + e2]\n            b3 = P[X + e3]\n            if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n              c0_1 = d0[p0 + d0_1]\n              c0_2 = d0[p0 + d0_2]\n              c0_3 = d0[p0 + d0_3]\n              vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2)\n              v0 = V[X] = N++\n              if (b3 !== b2) {\n                face(V[X + e2], v0, c0_2, c0_3, b2, b3, x0, x1, x2)\n              }\n            }\n            X += 1\n            p0 += u0_0\n            for (i0 = 2; i0 < s0; ++i0) {\n              c0_0 = d0[p0]\n              b0 = P[X] = phase(c0_0, x0, x1, x2)\n              b1 = P[X + e1]\n              b2 = P[X + e2]\n              b3 = P[X + e3]\n              if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n                c0_1 = d0[p0 + d0_1]\n                c0_2 = d0[p0 + d0_2]\n                c0_3 = d0[p0 + d0_3]\n                vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2)\n                v0 = V[X] = N++\n                if (b3 !== b2) {\n                  face(V[X + e2], v0, c0_2, c0_3, b2, b3, x0, x1, x2)\n                }\n                if (b3 !== b1) {\n                  face(V[X + e1], v0, c0_3, c0_1, b3, b1, x0, x1, x2)\n                }\n              }\n              X += 1\n              p0 += u0_0\n            }\n          }\n          if (i1 & 1) {\n            X = 0\n          }\n          T = e1\n          e1 = y1\n          y1 = T\n          T = e2\n          e2 = y2\n          y2 = T\n          T = e3\n          e3 = y3\n          y3 = T\n          p0 += u0_1\n        }\n      }\n      freeUint32(V)\n      freeUint32(P)\n    }\n  },\n  \"false,1,0\": function anonymous(vertex, face, phase, mallocUint32, freeUint32) {\n    return function extractContour1_0(a0, x0, x1, x2) {\n      var s0 = a0.shape[0] | 0,\n        s1 = a0.shape[1] | 0,\n        d0 = a0.data,\n        o0 = a0.offset | 0,\n        t0_0 = a0.stride[0] | 0,\n        t0_1 = a0.stride[1] | 0,\n        p0 = o0,\n        c0_0,\n        d0_1 = -t0_0 | 0,\n        c0_1 = 0,\n        d0_2 = -t0_1 | 0,\n        c0_2 = 0,\n        d0_3 = (-t0_0 - t0_1) | 0,\n        c0_3 = 0,\n        u0_1 = t0_1 | 0,\n        u0_0 = (t0_0 - t0_1 * s1) | 0,\n        i0 = 0,\n        i1 = 0,\n        N = 0,\n        Q = (2 * s1) | 0,\n        P = mallocUint32(Q),\n        V = mallocUint32(Q),\n        X = 0,\n        b0 = 0,\n        e2 = -1 | 0,\n        y2 = -1 | 0,\n        b2 = 0,\n        e1 = -s1 | 0,\n        y1 = s1 | 0,\n        b1 = 0,\n        e3 = (-s1 - 1) | 0,\n        y3 = (s1 - 1) | 0,\n        b3 = 0,\n        v0 = 0,\n        T = 0\n      for (i1 = 0; i1 < s1; ++i1) {\n        P[X++] = phase(d0[p0], x0, x1, x2)\n        p0 += u0_1\n      }\n      p0 += u0_0\n      if (s0 > 0) {\n        i0 = 1\n        P[X++] = phase(d0[p0], x0, x1, x2)\n        p0 += u0_1\n        if (s1 > 0) {\n          i1 = 1\n          c0_0 = d0[p0]\n          b0 = P[X] = phase(c0_0, x0, x1, x2)\n          b1 = P[X + e1]\n          b2 = P[X + e2]\n          b3 = P[X + e3]\n          if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n            c0_1 = d0[p0 + d0_1]\n            c0_2 = d0[p0 + d0_2]\n            c0_3 = d0[p0 + d0_3]\n            vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2)\n            v0 = V[X] = N++\n          }\n          X += 1\n          p0 += u0_1\n          for (i1 = 2; i1 < s1; ++i1) {\n            c0_0 = d0[p0]\n            b0 = P[X] = phase(c0_0, x0, x1, x2)\n            b1 = P[X + e1]\n            b2 = P[X + e2]\n            b3 = P[X + e3]\n            if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n              c0_1 = d0[p0 + d0_1]\n              c0_2 = d0[p0 + d0_2]\n              c0_3 = d0[p0 + d0_3]\n              vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2)\n              v0 = V[X] = N++\n              if (b3 !== b2) {\n                face(V[X + e2], v0, c0_2, c0_3, b2, b3, x0, x1, x2)\n              }\n            }\n            X += 1\n            p0 += u0_1\n          }\n        }\n        p0 += u0_0\n        X = 0\n        T = e1\n        e1 = y1\n        y1 = T\n        T = e2\n        e2 = y2\n        y2 = T\n        T = e3\n        e3 = y3\n        y3 = T\n        for (i0 = 2; i0 < s0; ++i0) {\n          P[X++] = phase(d0[p0], x0, x1, x2)\n          p0 += u0_1\n          if (s1 > 0) {\n            i1 = 1\n            c0_0 = d0[p0]\n            b0 = P[X] = phase(c0_0, x0, x1, x2)\n            b1 = P[X + e1]\n            b2 = P[X + e2]\n            b3 = P[X + e3]\n            if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n              c0_1 = d0[p0 + d0_1]\n              c0_2 = d0[p0 + d0_2]\n              c0_3 = d0[p0 + d0_3]\n              vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2)\n              v0 = V[X] = N++\n              if (b3 !== b1) {\n                face(V[X + e1], v0, c0_3, c0_1, b3, b1, x0, x1, x2)\n              }\n            }\n            X += 1\n            p0 += u0_1\n            for (i1 = 2; i1 < s1; ++i1) {\n              c0_0 = d0[p0]\n              b0 = P[X] = phase(c0_0, x0, x1, x2)\n              b1 = P[X + e1]\n              b2 = P[X + e2]\n              b3 = P[X + e3]\n              if (b0 !== b1 || b0 !== b2 || b0 !== b3) {\n                c0_1 = d0[p0 + d0_1]\n                c0_2 = d0[p0 + d0_2]\n                c0_3 = d0[p0 + d0_3]\n                vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, x0, x1, x2)\n                v0 = V[X] = N++\n                if (b3 !== b2) {\n                  face(V[X + e2], v0, c0_2, c0_3, b2, b3, x0, x1, x2)\n                }\n                if (b3 !== b1) {\n                  face(V[X + e1], v0, c0_3, c0_1, b3, b1, x0, x1, x2)\n                }\n              }\n              X += 1\n              p0 += u0_1\n            }\n          }\n          if (i0 & 1) {\n            X = 0\n          }\n          T = e1\n          e1 = y1\n          y1 = T\n          T = e2\n          e2 = y2\n          y2 = T\n          T = e3\n          e3 = y3\n          y3 = T\n          p0 += u0_0\n        }\n      }\n      freeUint32(V)\n      freeUint32(P)\n    }\n  },\n}\n\n//Generates the surface procedure\nfunction compileSurfaceProcedure(vertexFunc, faceFunc, phaseFunc, scalarArgs, order, typesig) {\n  var key = [typesig, order].join(',')\n  var proc = allFns[key]\n\n  return proc(\n    vertexFunc,\n    faceFunc,\n    phaseFunc,\n    pool.mallocUint32,\n    pool.freeUint32)\n}\n\nfunction createSurfaceExtractor(args) {\n  function error(msg) {\n    throw new Error(\"ndarray-extract-contour: \" + msg)\n  }\n  if(typeof args !== \"object\") {\n    error(\"Must specify arguments\")\n  }\n  var order = args.order\n  if(!Array.isArray(order)) {\n    error(\"Must specify order\")\n  }\n  var arrays = args.arrayArguments||1\n  if(arrays < 1) {\n    error(\"Must have at least one array argument\")\n  }\n  var scalars = args.scalarArguments||0\n  if(scalars < 0) {\n    error(\"Scalar arg count must be > 0\")\n  }\n  if(typeof args.vertex !== \"function\") {\n    error(\"Must specify vertex creation function\")\n  }\n  if(typeof args.cell !== \"function\") {\n    error(\"Must specify cell creation function\")\n  }\n  if(typeof args.phase !== \"function\") {\n    error(\"Must specify phase function\")\n  }\n  var getters = args.getters || []\n  var typesig = new Array(arrays)\n  for(var i=0; i<arrays; ++i) {\n    if(getters.indexOf(i) >= 0) {\n      typesig[i] = true\n    } else {\n      typesig[i] = false\n    }\n  }\n  return compileSurfaceProcedure(\n    args.vertex,\n    args.cell,\n    args.phase,\n    scalars,\n    order,\n    typesig)\n}"]},"metadata":{},"sourceType":"script"}